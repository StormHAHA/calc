import React from "react";
import { useRef } from "react";

export default function Step(props) {
  const { step } = props;
  const printRef = useRef();
  const handlePrint = () => {
   const printContents = printRef.current.innerHTML;
    const newWindow = window.open("", "", "width=800,height=600");
    newWindow.document.write(`
      <html>
        <head>
          <title>–†–∞—Å—á–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –∏–∑–¥–µ–ª–∏—è</title>
          <style>
            body { font-family: sans-serif; padding: 20px; background: #fff; color: #000; }
          </style>
        </head>
        <body>${printContents}</body>
      </html>
    `);
    newWindow.document.close();
    newWindow.print();
  };
  // –•–µ–ª–ø–µ—Ä –¥–ª—è –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä–∞
  const getPlaceholder = (field) => {
    const match = field.match(/([WH])(\d+)/); 
    if (!match) return field; 

    const [, type, num] = match; 

    if (num === "1") {
      return type === "W" ? "–®–∏—Ä–∏–Ω–∞" : "–ì–ª—É–±–∏–Ω–∞";
    } else {
      return type === "W" ? `–®–∏—Ä–∏–Ω–∞ ${num - 1}` : `–ì–ª—É–±–∏–Ω–∞ ${num - 1}`;
    }
  };
  const baseCard = "bg-gradient-to-br from-[#3B6036]/80 to-[#62C584]/20 backdrop-blur-sm border border-[#3B6036]/40 rounded-2xl p-8 shadow-2xl shadow-[#3B6036]/20";

  // –ê–∫—Ç–∏–≤–Ω–∞—è –∫–Ω–æ–ø–∫–∞ (–∑–µ–ª—ë–Ω–∞—è)
  const activeBtn = "bg-gradient-to-br from-[#3B6036]/50 to-[#62C584]/50 border-[#62C584] shadow-lg shadow-[#3B6036]/40";

  // –ü–∞—Å—Å–∏–≤–Ω–∞—è –∫–Ω–æ–ø–∫–∞
  const inactiveBtn = "bg-gradient-to-br from-gray-700/50 to-gray-800/50 border-gray-600/50 hover:border-[#62C584]/40";
  if (step.type === "type") {
    const types = ["–°—Ç–æ–ª–µ—à–Ω–∏—Ü—ã –¥–ª—è –∫—É—Ö–Ω–∏", "–°—Ç–æ–ª–µ—à–Ω–∏—Ü—ã –¥–ª—è –≤–∞–Ω–Ω–æ–π", "–ü–æ–¥–æ–∫–æ–Ω–Ω–∏–∫–∏"];
    const descr = ["–ö—É—Ö–æ–Ω–Ω—ã–µ –∏ —Ä–∞–±–æ—á–∏–µ —Å—Ç–æ–ª–µ—à–Ω–∏—Ü—ã", "–ò–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –º–æ–π–∫–∏", "–ü–æ–¥–æ–∫–æ–Ω–Ω–∏–∫–∏ –∏–∑ –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∫–∞–º–Ω—è"];
    const images = ["ü´ñ", "üõÄüèø", "ü™ü"];

    return (
      <section className="w-full">
        <div className={baseCard}>
          <div className="text-center mb-8">
            <h2 className="text-3xl font-bold text-white mb-2">–¢–∏–ø –ø—Ä–æ–¥—É–∫—Ç–∞</h2>
            <p className="text-gray-400">–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø—Ä–æ–¥—É–∫—Ç–∞ –¥–ª—è –Ω–∞—á–∞–ª–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏</p>
          </div>
          
          <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
            {types.map((type, i) => (
              <button
                key={i}
                onClick={() => props.setProductType?.(type)}
                className={`group relative overflow-hidden rounded-xl border-2 p-8 transition-all duration-300 hover:scale-105 hover:shadow-2xl
                  ${props.productType === type 
                    ? "bg-gradient-to-br from-emerald-500/30 to-emerald-600/30 border-emerald-400 shadow-emerald-500/20" 
                    : "bg-gradient-to-br from-gray-700/50 to-gray-800/50 border-gray-600/50 hover:border-gray-500"
                  }`}
              >
                <div className="absolute inset-0 bg-gradient-to-br from-white/5 to-transparent opacity-0 group-hover:opacity-100 transition-opacity duration-300" />
                
                <div className="relative z-10">
                  <div className="text-7xl mb-4 transform group-hover:scale-110 transition-transform duration-300">
                    {images[i]}
                  </div>
                  <h3 className="text-xl font-semibold text-white mb-3">{type}</h3>
                  <p className="text-gray-400 text-sm leading-relaxed">{descr[i]}</p>
                </div>
              </button>
            ))}
          </div>
        </div>
      </section>
    );
  }

  if (step.type === "shape") {
    let shapes, imgs, h;
    
    if (props.productType === "–°—Ç–æ–ª–µ—à–Ω–∏—Ü—ã –¥–ª—è –∫—É—Ö–Ω–∏") {
      shapes = ["–ü—Ä—è–º–∞—è", "–ì-–æ–±—Ä–∞–∑–Ω–∞—è", "–ü-–æ–±—Ä–∞–∑–Ω–∞—è"];
      imgs = ["/img/001.jpg", "/img/002.jpg", "/img/003.jpg"];
      h = "–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º—É —Å—Ç–æ–ª–µ—à–Ω–∏—Ü—ã –¥–ª—è –∫—É—Ö–Ω–∏";
    } else if (props.productType === "–°—Ç–æ–ª–µ—à–Ω–∏—Ü—ã –¥–ª—è –≤–∞–Ω–Ω–æ–π") {
      shapes = ["–ü—Ä—è–º–∞—è"];
      imgs = ["/img/014.jpg"];
      h = "–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º—É —Å—Ç–æ–ª–µ—à–Ω–∏—Ü—ã –¥–ª—è –≤–∞–Ω–Ω–æ–π";
    } else {
      shapes = ["–ü—Ä—è–º–æ–π", "–£–≥–ª–æ–≤–æ–π", "–≠—Ä–∫–µ—Ä–Ω—ã–π"];
      imgs = ["/img/005.jpg", "/img/006.jpg", "/img/004.jpg"];
      h = "–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º—É –ø–æ–¥–æ–∫–æ–Ω–Ω–∏–∫–∞";
    }

    return (
      <section className="w-full">
        <div className={baseCard}>
          <div className="text-center mb-8">
            <h2 className="text-3xl font-bold text-white mb-2">–§–æ—Ä–º–∞ –∏–∑–¥–µ–ª–∏—è</h2>
            <p className="text-gray-400">{h}</p>
          </div>
          
          <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
            {shapes.map((shape, i) => (
              <button
                key={i}
                onClick={() => props.setShape?.(shape)}
                className={`group relative overflow-hidden rounded-xl border-2 p-6 transition-all duration-300 hover:scale-105 hover:shadow-2xl
                  ${props.shape === shape 
                    ? "bg-gradient-to-br from-emerald-500/30 to-emerald-600/30 border-emerald-400 shadow-emerald-500/20" 
                    : "bg-gradient-to-br from-gray-700/50 to-gray-800/50 border-gray-600/50 hover:border-gray-500"
                  }`}
              >
                <div className="absolute inset-0 bg-gradient-to-br from-white/5 to-transparent opacity-0 group-hover:opacity-100 transition-opacity duration-300" />
                
                <div className="relative z-10">
                  <div className="w-full h-38 mb-4 rounded-lg overflow-hidden bg-gray-600/30">
                    <img 
                      src={imgs[i]} 
                      alt={shape}
                      className="w-full h-full  object-cover transition-transform duration-300 group-hover:scale-110"
                    />
                  </div>
                  <h3 className="text-lg font-semibold text-white">{shape}</h3>
                </div>
              </button>
            ))}
          </div>
        </div>
      </section>
    );
  }

  if (step.type === "material") {
    const materials = ["LG (Hi-Macs)", "Samsung (Staron)", "Corian (Dupont)", "Hanex", "Grandex", "Neomarm"];
    const materialKeys = {
      "LG (Hi-Macs)": "LG",
      "Samsung (Staron)": "Staron",
      "Corian (Dupont)": "Corian",
      "Hanex": "Hanex",
      "Grandex": "Grandex",
      "Neomarm": "Neomarm"
    };
    const imgs = [
      "/img/HiMacs.png",
      "/img/Staron.png",
      "/img/Dupont.png",
      "/img/Hanex.png",
      "/img/Grandex.png",
      "/img/Neomarm.png",
    ];

    const selectedSeries = props.selectedMaterial ? props.materials?.[props.selectedMaterial.type] : [];

    return (
      <section className="w-full">
        <div className={baseCard}>
          <div className="text-center mb-8">
            <h2 className="text-3xl font-bold text-white mb-2">–ú–∞—Ç–µ—Ä–∏–∞–ª</h2>
            <p className="text-gray-400">–í—ã–±–µ—Ä–∏—Ç–µ –º–∞—Ç–µ—Ä–∏–∞–ª –¥–ª—è –≤–∞—à–µ–≥–æ –∏–∑–¥–µ–ª–∏—è</p>
          </div>

          <div className="grid grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-6 mb-8">
            {materials.map((mat, i) => {
              const key = materialKeys[mat];
              return (
                <button
                  key={i}
                  onClick={() => props.setSelectedMaterial?.({ type: key, index: 0 })}
                  className={`group relative overflow-hidden rounded-xl border-2 p-4 transition-all duration-300 hover:scale-105 hover:shadow-2xl
                    ${props.selectedMaterial?.type === key 
                      ? "bg-gradient-to-br from-emerald-500/30 to-emerald-600/30 border-emerald-400 shadow-emerald-500/20" 
                      : "bg-gradient-to-br from-gray-700/50 to-gray-800/50 border-gray-600/50 hover:border-gray-500"
                    }`}
                >
                  <div className="absolute inset-0 bg-gradient-to-br from-white/5 to-transparent opacity-0 group-hover:opacity-100 transition-opacity duration-300" />
                  
                  <div className="relative z-10">
                    <div className="w-full h-24 mb-3 rounded-lg overflow-hidden bg-gray-600/30">
                      <img
                        src={imgs[i]}
                        alt={mat}
                        className="w-full h-full object-cover transition-transform duration-300 group-hover:scale-110"
                      />
                    </div>
                    <h3 className="text-sm font-semibold text-white text-center">{mat}</h3>
                  </div>
                </button>
              );
            })}
          </div>

          {props.selectedMaterial?.type && selectedSeries && selectedSeries.length > 0 && (
            <div className="bg-gradient-to-r from-gray-700/30 to-gray-800/30 rounded-xl border border-gray-600/50 p-6">
              <h3 className="text-xl font-semibold text-white mb-4 text-center">
                –°–µ—Ä–∏–∏ {props.selectedMaterial.type}
              </h3>
              <div className="flex gap-3 flex-wrap justify-center">
                {selectedSeries.map((val, idx) => (
                  <button
                    key={idx}
                    onClick={() => props.setSelectedMaterial?.({ type: props.selectedMaterial?.type, index: idx })}
                    className={`px-4 py-2 rounded-lg border-2 transition-all duration-300 hover:scale-105
                      ${props.selectedMaterial?.index === idx 
                        ? "bg-emerald-500 border-emerald-400 text-white shadow-emerald-500/30" 
                        : "bg-gray-700/50 border-gray-600 text-gray-300 hover:border-gray-500"
                      }`}
                  >
                    {val} –º–º
                  </button>
                ))}
              </div>
            </div>
          )}
        </div>
      </section>
    );
  }

  if (step.type === "profile") {
    const profileNames = ["R3", "R5", "R10", "L45", "–ö–ª–∞—Å—Å–∏–∫–∞", "–ù–µ–ø—Ä–æ–ª–∏–≤–∞–π–∫–∞"];
    const imgs = ["/img/k1.jpg", "/img/k2.jpg", "/img/k3.jpg", "/img/k4.jpg", "/img/k5.jpg", "/img/k6.jpg"];

    return (
      <section className="w-full">
        <div className={baseCard}>
          <div className="text-center mb-8">
            <h2 className="text-3xl font-bold text-white mb-2">–ü—Ä–æ—Ñ–∏–ª—å</h2>
            <p className="text-gray-400">–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ—Ñ–∏–ª—å –¥–ª—è –≤–∞—à–µ–≥–æ –∏–∑–¥–µ–ª–∏—è</p>
          </div>

          <div className="grid grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-6">
            {profileNames.map((name, i) => (
              <button
                key={i}
                onClick={() => props.setSelectedProfile?.(i)}
                className={`group relative overflow-hidden rounded-xl border-2 p-4 transition-all duration-300 hover:scale-105 hover:shadow-2xl
                  ${props.selectedProfile === i 
                    ? "bg-gradient-to-br from-emerald-500/30 to-emerald-600/30 border-emerald-400 shadow-emerald-500/20" 
                    : "bg-gradient-to-br from-gray-700/50 to-gray-800/50 border-gray-600/50 hover:border-gray-500"
                  }`}
              >
                <div className="absolute inset-0 bg-gradient-to-br from-white/5 to-transparent opacity-0 group-hover:opacity-100 transition-opacity duration-300" />
                
                <div className="relative z-10">
                  <div className="w-full h-34 mb-3 rounded-lg overflow-hidden bg-gray-600/30">
                    <img
                      src={imgs[i]}
                      alt={name}
                      className="w-full h-full object-cover transition-transform duration-300 group-hover:scale-110"
                    />
                  </div>
                  <h3 className="font-semibold text-white text-center">{name}</h3>
                </div>
              </button>
            ))}
          </div>
        </div>
      </section>
    );
  }

  if (step.type === "bord") {
    const bordNames = ["–ì–∞–ª—Ç–µ–ª—å", "R3-R5", "–ö–ª–∞—Å—Å–∏–∫–∞", "L45", "–õ–∏—Ç–æ–π"];
    const imgs = ["/img/b1.jpg", "/img/b2.jpg", "/img/b3.jpg", "/img/b4.jpg", "/img/b5.jpg"];

    return (
      <section className="w-full">
        <div className={baseCard}>
          <div className="text-center mb-8">
            <h2 className="text-3xl font-bold text-white mb-2">–ë–æ—Ä—Ç–∏–∫</h2>
            <p className="text-gray-400">–í—ã–±–µ—Ä–∏—Ç–µ –±–æ—Ä—Ç–∏–∫ –¥–ª—è –≤–∞—à–µ–≥–æ –∏–∑–¥–µ–ª–∏—è</p>
          </div>

          <div className="grid grid-cols-2 md:grid-cols-3 lg:grid-cols-5 gap-6">
            {bordNames.map((name, i) => (
              <button
                key={i}
                onClick={() => props.setSelectedBord?.(i)}
                className={`group relative overflow-hidden rounded-xl border-2 p-4 transition-all duration-300 hover:scale-105 hover:shadow-2xl
                  ${props.selectedBord === i 
                    ? "bg-gradient-to-br from-emerald-500/30 to-emerald-600/30 border-emerald-400 shadow-emerald-500/20" 
                    : "bg-gradient-to-br from-gray-700/50 to-gray-800/50 border-gray-600/50 hover:border-gray-500"
                  }`}
              >
                <div className="absolute inset-0 bg-gradient-to-br from-white/5 to-transparent opacity-0 group-hover:opacity-100 transition-opacity duration-300" />
                
                <div className="relative z-10">
                  <div className="w-full h-24 mb-3 rounded-lg overflow-hidden bg-gray-600/30">
                    <img
                      src={imgs[i]}
                      alt={name}
                      className="w-full h-full object-cover transition-transform duration-300 group-hover:scale-110"
                    />
                  </div>
                  <h3 className="font-semibold text-white text-center">{name}</h3>
                </div>
              </button>
            ))}
          </div>
        </div>
      </section>
    );
  }

  if (step.type === "dimensions") {
    let dimensionFields = [];
    let shapeImage = "";

    if (props.productType === "–°—Ç–æ–ª–µ—à–Ω–∏—Ü—ã –¥–ª—è –∫—É—Ö–Ω–∏") {
      if (props.shape === "–ü—Ä—è–º–∞—è") {
        dimensionFields = ["W1", "H1"];
        shapeImage = "/img/001b.png";
      } else if (props.shape === "–ì-–æ–±—Ä–∞–∑–Ω–∞—è") {
        dimensionFields = ["W1", "H1", "W2", "H2"];
        shapeImage = "/img/002b.png";
      } else if (props.shape === "–ü-–æ–±—Ä–∞–∑–Ω–∞—è") {
        dimensionFields = ["W1", "H1", "W2", "H2", "W3", "H3"];
        shapeImage = "/img/003b.png";
      }
    } else if (props.productType === "–°—Ç–æ–ª–µ—à–Ω–∏—Ü—ã –¥–ª—è –≤–∞–Ω–Ω–æ–π") {
      dimensionFields = ["W1", "H1"];
      shapeImage = "/img/014b.png";
    } else if (props.productType === "–ü–æ–¥–æ–∫–æ–Ω–Ω–∏–∫–∏") {
      if (props.shape === "–ü—Ä—è–º–æ–π") {
        dimensionFields = ["W1", "H1"];
        shapeImage = "/img/005b.png";
      } else if (props.shape === "–£–≥–ª–æ–≤–æ–π") {
        dimensionFields = ["W1", "H1", "W2", "H2"];
        shapeImage = "/img/006b.png";
      } else if (props.shape === "–≠—Ä–∫–µ—Ä–Ω—ã–π") {
        dimensionFields = ["W1", "H1", "W2", "H2", "W3", "H3"];
        shapeImage = "/img/004b.png";
      }
    }

    const kitchenSinks = ["M410", "MR410", "D380", "M250"];
    const bathSinks = ["L600", "SH500", "R530"];
    const washingImages = {
      M410: "/img/washing0.jpg",
      MR410: "/img/washing1.jpg",
      D380: "/img/washing2.jpg",
      M250: "/img/washing5.jpg",
      L600: "/img/washing3.jpg",
      SH500: "/img/washing4.jpg",
      R530: "/img/washing6.jpg",
    };

    return (
      <section className="w-full">
        <div className={baseCard}>
          <div className="text-center mb-8">
            <h2 className="text-3xl font-bold text-white mb-2">–†–∞–∑–º–µ—Ä—ã (–º–º)</h2>
            <p className="text-gray-400">–£–∫–∞–∂–∏—Ç–µ —Ç–æ—á–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã –≤–∞—à–µ–≥–æ –∏–∑–¥–µ–ª–∏—è</p>
          </div>

          <div className="grid grid-cols-1 lg:grid-cols-2 gap-8 mb-8">
            {/* –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ñ–æ—Ä–º—ã */}
            <div className="flex justify-center">
              <div className="w-full max-w-md">
                <img 
                  src={shapeImage} 
                  alt={props.shape} 
                  className="w-full h-auto rounded-xl border border-gray-600/50 shadow-lg"
                />
              </div>
            </div>

            {/* –ü–æ–ª—è –≤–≤–æ–¥–∞ —Ä–∞–∑–º–µ—Ä–æ–≤ */}
            <div className="space-y-4">
              <h3 className="text-xl font-semibold text-white mb-4">–û—Å–Ω–æ–≤–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã</h3>
              <div className="grid grid-cols-2 gap-4">
                {dimensionFields.map((field) => (
                  <div key={field} className="space-y-2">
                    <label className="block text-gray-300 font-medium">{getPlaceholder(field)}</label>
                    <input
                      type="number"
                      value={props.dimensions?.[field] || ""}
                      onChange={(e) =>
                        props.setDimensions?.({ 
                          ...props.dimensions, 
                          [field]: e.target.value === "" ? 0 : +e.target.value 
                        })
                      }
                      className="w-full px-4 py-3 bg-gray-700/50 border border-gray-600 rounded-lg text-white placeholder-gray-400 focus:ring-2 focus:ring-emerald-500 focus:border-emerald-500 transition-all duration-300"
                      placeholder={"–ó–Ω–∞—á–µ–Ω–∏–µ –≤ –º–º"}
                      step="1"
                      min="0"
                    />
                  </div>
                ))}
              </div>
            </div>
          </div>

          {/* –†–∞–¥–∏—É—Å—ã –±–æ—Ä—Ç–∏–∫–æ–≤ */}
          {(props.productType === "–°—Ç–æ–ª–µ—à–Ω–∏—Ü—ã –¥–ª—è –∫—É—Ö–Ω–∏" || props.productType === "–°—Ç–æÔøΩÔøΩ–µ—à–Ω–∏—Ü—ã –¥–ª—è –≤–∞–Ω–Ω–æ–π") ? (
            <div className="bg-gradient-to-r from-gray-700/30 to-gray-800/30 rounded-xl border border-gray-600/50 p-6 mb-8">
              <h3 className="text-xl font-semibold text-white mb-4">–†–∞–¥–∏—É—Å—ã –±–æ—Ä—Ç–∏–∫–æ–≤ (–º–º)</h3>
              <div className="grid grid-cols-2 md:grid-cols-4 gap-4">
                {[0, 1, 2, 3].map((i) => (
                  <div key={i} className="space-y-2">
                    <label className="block text-gray-300 text-center">–†–∞–¥–∏—É—Å {i + 1}</label>
                    <input
                      type="number"
                      value={props.rounding?.[i] || ""}
                      onChange={(e) => {
                        const newRounding = [...(props.rounding || [0, 0, 0, 0])];
                        newRounding[i] = e.target.value === "" ? 0 : +e.target.value;
                        props.setRounding?.(newRounding);
                      }}
                      className="w-full px-3 py-2 bg-gray-700/50 border border-gray-600 rounded-lg text-white text-center focus:ring-2 focus:ring-emerald-500 focus:border-emerald-500 transition-all duration-300"
                      placeholder="0"
                      step="1"
                      min="0"
                    />
                  </div>
                ))}
              </div>
            </div>
          ) : (
            dimensionFields.length > 2 && (
              <div className="bg-gradient-to-r from-gray-700/30 to-gray-800/30 rounded-xl border border-gray-600/50 p-6 mb-8">
                <h3 className="text-xl font-semibold text-white mb-4">–†–∞–¥–∏—É—Å—ã –±–æ—Ä—Ç–∏–∫–æ–≤ (–º–º)</h3>
                <div className="grid grid-cols-2 md:grid-cols-3 gap-4">
                  {dimensionFields.map((f, i) => (
                    <div key={i} className="space-y-2">
                      <label className="block text-gray-300 text-center">{f} —Ä–∞–¥–∏—É—Å</label>
                      <input
                        type="number"
                        value={props.rounding?.[i] || ""}
                        onChange={(e) => {
                          const newRounding = [...(props.rounding || [])];
                          newRounding[i] = e.target.value === "" ? 0 : +e.target.value;
                          props.setRounding?.(newRounding);
                        }}
                        className="w-full px-3 py-2 bg-gray-700/50 border border-gray-600 rounded-lg text-white text-center focus:ring-2 focus:ring-emerald-500 focus:border-emerald-500 transition-all duration-300"
                        placeholder="0"
                        step="1"
                        min="0"
                      />
                    </div>
                  ))}
                </div>
              </div>
            )
          )}

          {/* –ë–ª–æ–∫ —Å –º–æ–π–∫–æ–π */}
          {(props.productType === "–°—Ç–æ–ª–µ—à–Ω–∏—Ü—ã –¥–ª—è –∫—É—Ö–Ω–∏" || props.productType === "–°—Ç–æ–ª–µ—à–Ω–∏—Ü—ã –¥–ª—è –≤–∞–Ω–Ω–æ–π") && (
            <div className="bg-gradient-to-r from-gray-700/30 to-gray-800/30 rounded-xl border border-gray-600/50 p-6">
              <h3 className="text-xl font-semibold text-white mb-4">–ú–æ–π–∫–∞</h3>

              <div className="space-y-4">
                <label className="flex items-center gap-3 cursor-pointer group">
                  <input
                    type="checkbox"
                    checked={props.cutoutWashing}
                    onChange={(e) => {
                      props.setCutoutWashing?.(e.target.checked);
                      if (!e.target.checked) {
                        props.setSinkStone?.(false);
                        props.setSelectedWashings?.([]);
                      }
                    }}
                     className="
                        w-5 h-5
                        form-checkbox
                        text-emerald-500
                        bg-gray-700
                        border-gray-600
                        rounded
                        focus:ring-emerald-500 focus:ring-2
                        cursor-pointer
                      "
                    />
                  <span className="text-white group-hover:text-emerald-300 transition-colors duration-300">–í—ã—Ä–µ–∑ –ø–æ–¥ –º–æ–π–∫—É</span>
                </label>

                {props.cutoutWashing && (
                  <label className="flex items-center gap-3 ml-8 cursor-pointer group">
                    <input
                      type="checkbox"
                      checked={props.sinkStone}
                      onChange={(e) => {
                        props.setSinkStone?.(e.target.checked);
                        if (!e.target.checked) {
                          props.setSelectedWashings?.([]);
                        }
                      }}
                      className="
                        w-5 h-5
                        form-checkbox
                        text-emerald-500
                        bg-gray-700
                        border-gray-600
                        rounded
                        focus:ring-emerald-500 focus:ring-2
                        cursor-pointer
                      "
                    />
                    <span className="text-white group-hover:text-emerald-300 transition-colors duration-300">–ú–æ–π–∫–∞ –∏–∑ –∫–∞–º–Ω—è</span>
                  </label>
                )}

                {props.cutoutWashing && props.sinkStone && (
                  <div className="grid grid-cols-2 md:grid-cols-4 gap-4 mt-6">
                    {(props.productType === "–°—Ç–æ–ª–µ—à–Ω–∏—Ü—ã –¥–ª—è –∫—É—Ö–Ω–∏" ? kitchenSinks : bathSinks).map((sink, i) => (
                      <button
                        key={i}
                        onClick={() => props.setSelectedWashings?.([i])}
                        className={`group relative overflow-hidden rounded-xl border-2 p-4 transition-all duration-300 hover:scale-105 hover:shadow-2xl
                          ${props.selectedWashings?.includes(i) 
                            ? "bg-gradient-to-br from-emerald-500/30 to-emerald-600/30 border-emerald-400 shadow-emerald-500/20" 
                            : "bg-gradient-to-br from-gray-700/50 to-gray-800/50 border-gray-600/50 hover:border-gray-500"
                          }`}
                      >
                        <div className="absolute inset-0 bg-gradient-to-br from-white/5 to-transparent opacity-0 group-hover:opacity-100 transition-opacity duration-300" />
                        
                        <div className="relative z-10">
                          {washingImages[sink] && (
                            <div className="w-full h-34 mb-3 rounded-lg overflow-hidden bg-gray-600/30">
                              <img
                                src={washingImages[sink]}
                                alt={sink}
                                className="w-full h-full object-cover transition-transform duration-300 group-hover:scale-110"
                              />
                            </div>
                          )}
                          <h3 className="font-semibold text-white text-center">{sink}</h3>
                        </div>
                      </button>
                    ))}
                  </div>
                )}
              </div>
            </div>
          )}
        </div>
      </section>
    );
  }

  if (step.type === "summary") {
    // –†–∞—Å—á–µ—Ç –ø–ª–æ—â–∞–¥–∏
    let S = 0;
    if (props.productType === "–ü–æ–¥–æ–∫–æ–Ω–Ω–∏–∫–∏") {
      if (props.dimensions?.W3 && props.dimensions?.H3) {
        S = (props.dimensions.W1 * props.dimensions.H1 + props.dimensions.W2 * props.dimensions.H2 + props.dimensions.W3 * props.dimensions.H3) / 1000000;
      } else if (props.dimensions?.W2 && props.dimensions?.H2) {
        S = (props.dimensions.W1 * props.dimensions.H1 + props.dimensions.W2 * props.dimensions.H2) / 1000000;
      } else {
        S = (props.dimensions?.W1 * props.dimensions?.H1) / 1000000;
      }
    } else {
      if (props.shape === "–ü—Ä—è–º–∞—è") {
        S = (props.dimensions?.W1 * props.dimensions?.H1) / 1000000;
      } else if (props.shape === "–ì-–æ–±—Ä–∞–∑–Ω–∞—è") {
        S = (props.dimensions?.W1 * props.dimensions?.H1 + (props.dimensions?.H2 - props.dimensions?.H1) * props.dimensions?.W2) / 1000000;
      } else if (props.shape === "–ü-–æ–±—Ä–∞–∑–Ω–∞—è") {
        S = (props.dimensions?.W1 * props.dimensions?.H2 + (props.dimensions?.H1 - props.dimensions?.H2) * props.dimensions?.W2 + props.dimensions?.W3 * props.dimensions?.H3) / 1000000;
      }
    }

    const pricePerM2 = props.materials?.[props.selectedMaterial?.type]?.[props.selectedMaterial?.index] || 0;
    const totalPrice = props.calculateTotal?.() || 0;

    return (
      <div>
      <section className="w-full" ref={printRef}>
        <div className={baseCard}>
          <div className="text-center mb-8">
            <h2 className="text-3xl font-bold text-white mb-2">–†–∞—Å—á–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –∏–∑–¥–µ–ª–∏—è</h2>
            <p className="text-gray-400">–î–µ—Ç–∞–ª—å–Ω–∞—è —Å–º–µ—Ç–∞ –≤–∞—à–µ–≥–æ –∑–∞–∫–∞–∑–∞</p>
          </div>
          
          <div className="grid grid-cols-1 md:grid-cols-2 gap-6 mb-8">
            {/* –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è */}
            <div className="space-y-4">
              <div className="bg-gradient-to-r from-gray-700/30 to-gray-800/30 rounded-xl p-4 border border-gray-600/50">
                <h3 className="text-lg font-semibold text-white mb-3">–û—Å–Ω–æ–≤–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã</h3>
                <div className="space-y-2">
                  <div className="flex justify-between">
                    <span className="text-gray-300">–§–æ—Ä–º–∞: </span>
                    <span className="text-white font-medium">{props.shape}</span>
                  </div>
                  <div className="flex justify-between">
                    <span className="text-gray-300">–ü–ª–æ—â–∞–¥—å –∏–∑–¥–µ–ª–∏—è: </span>
                    <span className="text-white font-medium">{S.toFixed(2)} –º¬≤</span>
                  </div>
                  <div className="flex justify-between">
                    <span className="text-gray-300">–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å: </span>
                    <span className="text-white font-medium">{props.selectedMaterial?.type}</span>
                  </div>
                  <div className="flex justify-between">
                    <span className="text-gray-300">–¢–æ–ª—â–∏–Ω–∞ –º–∞—Ç–µ—Ä–∏–∞–ª–∞: </span>
                    <span className="text-white font-medium">{props.materials?.[props.selectedMaterial?.type]?.[props.selectedMaterial?.index]} –º–º</span>
                  </div>
                </div>
              </div>

              <div className="bg-gradient-to-r from-gray-700/30 to-gray-800/30 rounded-xl p-4 border border-gray-600/50">
                <h3 className="text-lg font-semibold text-white mb-3">–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ–ø—Ü–∏–∏</h3>
                <div className="space-y-2">
                  <div className="flex justify-between">
                    <span className="text-gray-300">–í–∏–¥ –ø–µ—Ä–µ–¥–Ω–µ–π –∫—Ä–æ–º–∫–∏: </span>
                    <span className="text-white font-medium">{["R3", "R5", "R10", "L45", "–ö–ª–∞—Å—Å–∏–∫–∞", "–ù–µ–ø—Ä–æ–ª–∏–≤–∞–π–∫–∞"][props.selectedProfile || 0]}</span>
                  </div>
                  
                  {props.productType !== "–ü–æ–¥–æ–∫–æ–Ω–Ω–∏–∫–∏" && (
                    <>
                      <div className="flex justify-between">
                        <span className="text-gray-300">–†–∞–¥–∏—É—Å—ã –±–æ—Ä—Ç–∏–∫–æ–≤: </span>
                        <span className="text-white font-medium">{props.rounding?.map(r => r || 0).join(", ")}</span>
                      </div>
                      <div className="flex justify-between">
                        <span className="text-gray-300">–í—ã—Ä–µ–∑ –ø–æ–¥ –º–æ–π–∫—É: </span>
                        <span className={`font-medium ${props.cutoutWashing ? 'text-emerald-400' : 'text-red-400'}`}>
                          {props.cutoutWashing ? "–î–∞" : "–ù–µ—Ç"}
                        </span>
                      </div>
                      {props.cutoutWashing && props.sinkStone && (
                        <div className="flex justify-between">
                          <span className="text-gray-300">–í—ã–±—Ä–∞–Ω–Ω–∞—è –º–æ–π–∫–∞: </span>
                          <span className="text-white font-medium">{props.selectedWashings?.map(i => props.washings?.[i]?.[0]).join(", ")}</span>
                        </div>
                      )}
                    </>
                  )}
                </div>
              </div>
            </div>

            {/* –°—Ç–æ–∏–º–æ—Å—Ç—å */}
            <div className="space-y-4">
              <div className="bg-gradient-to-r from-emerald-600/20 to-emerald-700/20 rounded-xl p-4 border border-emerald-500/30">
                <h3 className="text-lg font-semibold text-white mb-3">–°—Ç–æ–∏–º–æ—Å—Ç—å</h3>
                <div className="space-y-3">
                  <div className="flex justify-between">
                    <span className="text-gray-300">–°—Ç–æ–∏–º–æ—Å—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª–∞: </span>
                    <span className="text-white font-medium">{(pricePerM2 * S).toLocaleString()} —Ä—É–±.</span>
                  </div>
                  
                  {props.productType !== "–ü–æ–¥–æ–∫–æ–Ω–Ω–∏–∫–∏" && (
                    <div className="flex justify-between">
                      <span className="text-gray-300">–°—Ç–æ–∏–º–æ—Å—Ç—å –±–æ—Ä—Ç–∏–∫–∞: </span>
                      <span className="text-white font-medium">{(S * (props.bord?.[props.selectedBord || 0] || 0)).toLocaleString()} —Ä—É–±.</span>
                    </div>
                  )}
                  
                  <div className="border-t border-gray-600 pt-3">
                    <div className="flex justify-between items-center">
                      <span className="text-xl font-bold text-white">–ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: </span>
                      <span className="text-2xl font-bold text-emerald-400">{totalPrice.toLocaleString()} —Ä—É–±.</span>
                    </div>
                  </div>
                </div>
              </div>

              <div className="bg-gradient-to-r from-emerald-600/20 to-emerald-700/20 rounded-xl p-4 border border-emerald-500/30">
                <div className="text-center">
                  <h4 className="text-lg font-semibold text-white mb-2">–í–∞—à –∑–∞–∫–∞–∑ –≥–æ—Ç–æ–≤!</h4>
                  <p className="text-gray-300 text-sm mb-4">–°–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞–º–∏ –¥–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞</p>
                  <button className="w-full bg-gradient-to-r from-emerald-500 to-emerald-600 hover:from-emerald-600 hover:to-emerald-700 text-white font-semibold py-3 px-6 rounded-lg transition-all duration-300 transform hover:scale-105 shadow-lg hover:shadow-emerald-500/30">
                    –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑
                  </button>
                </div>
              </div>
            </div>
          </div>
        </div>
      </section>
      <button
        onClick={handlePrint}
        className="mt-4 px-4 py-2 bg-emerald-600 text-white rounded-lg"
      >
        –ü–µ—á–∞—Ç—å / PDF
      </button>
      </div>
    );
  }

  return null;
}