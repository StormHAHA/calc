export default function Step(props) {
  const { step } = props;
  if (step.type === "type") {
    const types = ["–°—Ç–æ–ª–µ—à–Ω–∏—Ü—ã –¥–ª—è –∫—É—Ö–Ω–∏", "–°—Ç–æ–ª–µ—à–Ω–∏—Ü—ã –¥–ª—è –≤–∞–Ω–Ω–æ–π", "–ü–æ–¥–æ–∫–æ–Ω–Ω–∏–∫–∏"];
    const descr = ["–ö—É—Ö–æ–Ω–Ω—ã–µ –∏ —Ä–∞–±–æ—á–∏–µ —Å—Ç–æ–ª–µ—à–Ω–∏—Ü—ã", "–ò–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –º–æ–π–∫–∏", "–ü–æ–∂–æ–∫–æ–Ω–Ω–∏–∫–∏ –∏–∑ –∏—Å–∫—É—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∫–∞–º–Ω—è"];
    const images = ["ü´ñ", "üõÄüèø", "ü™ü"]
    return (
      <section className="container"> 
        <div className="bg-white/5 rounded-br border border-white/10 p-4 flex flex-col gap-4">
          <h2 className="text-text-accent font-bold text-[24px]">–¢–∏–ø –ø—Ä–æ–¥—É–∫—Ç–∞</h2>
          <h3 className="text-text-secondary text-center">–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø—Ä–æ–¥—É–∫—Ç–∞</h3>
          <div className="flex items-center justify-between">
          {types.map((type, i) => (
  <button
    key={i}
    onClick={() => props.setProductType(type)}
    className={`w-[32.5%] bg-white/5 rounded-[12px] border px-4 py-8 border-white/50
      ${props.productType === type ? "bg-blue-500/30 border-blue-400" : ""}`}
  >
    <p className="text-[62px] text-center">{images[i]}</p>
    <p className="text-text-headers text-center py-2 font-semibold text-[18px]">{type}</p>
    <p className="text-text-secondary text-center">{descr[i]}</p>
  </button>
))}
          
          </div>
        </div>
      </section> 
    );
  }
  if(step.type === "shape") {
    let shapes, imgs, h;
    if (props.productType === "–°—Ç–æ–ª–µ—à–Ω–∏—Ü—ã –¥–ª—è –∫—É—Ö–Ω–∏") {
       shapes = ["–ü—Ä—è–º–∞—è","–ì-–æ–±—Ä–∞–∑–Ω–∞—è","–ü-–æ–±—Ä–∞–∑–Ω–∞—è"];
       imgs = ["/img/001.jpg", "/img/002.jpg", "/img/003.jpg"];
       h = "–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º—É —Å—Ç–æ–ª–µ—à–Ω–∏—Ü—ã –¥–ª—è –∫—É—Ö–Ω–∏";
    } else if (props.productType === "–°—Ç–æ–ª–µ—à–Ω–∏—Ü—ã –¥–ª—è –≤–∞–Ω–Ω–æ–π") {
       shapes = ["–ü—Ä—è–º–∞—è"];
       imgs = ["/img/014.jpg"];
       h = "–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º—É —Å—Ç–æ–ª–µ—à–Ω–∏—Ü—ã –¥–ª—è –≤–∞–Ω–Ω–æ–π";
    } else {
       shapes = ["–ü—Ä—è–º–æ–π", "–£–≥–ª–æ–≤–æ–π", "–≠—Ä–∫–µ—Ä–Ω—ã–π"];
       imgs = ["/img/004.jpg", "/img/005.jpg", "/img/006.jpg"];
       h = "–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º—É –ø–æ–¥–æ–∫–æ–Ω–Ω–∏–∫–∞";
    }
    return (
      <section className="container"> 
        <div className="bg-white/5 rounded-br border border-white/10 p-4 flex flex-col gap-4">
          <h2 className="text-text-accent font-bold text-[24px]">–§–æ—Ä–º–∞</h2>
          <h3 className="text-text-secondary text-center">{h}</h3>
          <div className="flex items-center justify-between">
          {shapes.map((shape, i) => (
  <button
    key={i}
    onClick={() => props.setShape(shape)}
    className={`w-[32.5%] bg-white/5 rounded-[12px] border px-4 py-8 border-white/50
      ${props.shape === shape ? "bg-blue-500/30 border-blue-400" : ""}`}
  >
    <img src={imgs[i]} alt="#" className="mx-auto"/>
    <p className="text-text-headers text-center py-2 font-semibold text-[18px]">{shape}</p>
  </button>
))}
          
          </div>
        </div>
      </section> 
    );
  }

if (step.type === "material") {
  const materials = ["LG", "Tristone", "Staron", "Corian", "Hanex", "Grandex", "Bienstone", "Neomarm"];
  const descr = [
    "–ù–∞–¥—ë–∂–Ω—ã–π –∏ –¥–æ—Å—Ç—É–ø–Ω—ã–π",
    "–£—Å—Ç–æ–π—á–∏–≤—ã–π –∫ –≤–ª–∞–≥–µ",
    "–ü—Ä–æ—á–Ω—ã–π –∏ –ø—Ä–∞–∫—Ç–∏—á–Ω—ã–π",
    "–ü—Ä–µ–º–∏–∞–ª—å–Ω–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ",
    "–†–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏–µ —Ç–µ–∫—Å—Ç—É—Ä",
    "–°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π —Å—Ç–∏–ª—å",
    "–≠–∫–æ–ª–æ–≥–∏—á–Ω—ã–π –∫–∞–º–µ–Ω—å",
    "–≠–ª–∏—Ç–Ω–∞—è –∫–æ–ª–ª–µ–∫—Ü–∏—è"
  ];
  const imgs = [
    "/img/mat-lg.jpg",
    "/img/mat-tristone.jpg",
    "/img/mat-staron.jpg",
    "/img/mat-corian.jpg",
    "/img/mat-hanex.jpg",
    "/img/mat-grandex.jpg",
    "/img/mat-bienstone.jpg",
    "/img/mat-neomarm.jpg"
  ];

  return (
    <section className="container">
      <div className="bg-white/5 rounded-br border border-white/10 p-4 flex flex-col gap-4">
        <h2 className="text-text-accent font-bold text-[24px]">–ú–∞—Ç–µ—Ä–∏–∞–ª</h2>
        <h3 className="text-text-secondary text-center">–í—ã–±–µ—Ä–∏—Ç–µ –º–∞—Ç–µ—Ä–∏–∞–ª –¥–ª—è –≤–∞—à–µ–≥–æ –∏–∑–¥–µ–ª–∏—è</h3>

        <div className="grid grid-cols-2 md:grid-cols-4 gap-4">
          {materials.map((mat, i) => (
            <button
              key={i}
              onClick={() => props.setSelectedMaterial({ type: mat, index: 0 })}
              className={`bg-white/5 rounded-[12px] border px-4 py-6 border-white/30 hover:border-blue-400 transition
                ${props.selectedMaterial.type === mat ? "bg-blue-500/30 border-blue-400" : ""}`}
            >
              <img
                src={imgs[i]}
                alt={mat}
                className="w-full h-24 object-cover rounded-md mb-2"
              />
              <p className="text-text-headers font-semibold text-center">{mat}</p>
              <p className="text-text-secondary text-sm text-center">{descr[i]}</p>
            </button>
          ))}
        </div>
      </div>
    </section>
  );
}
  if(step.type === "profile") {
    return (
      <div>
        <h2>–ü—Ä–æ—Ñ–∏–ª—å</h2>
        {props.selectedProfile != null && props.profiles.map((p,i) =>
          <button 
            key={i} 
            className={props.selectedProfile===i?"bg-blue-200":"bg-gray-100"} 
            onClick={()=>props.setSelectedProfile(i)}
          >
            –ü—Ä–æ—Ñ–∏–ª—å {i}
          </button>
        )}
      </div>
    );
  }

  if(step.type === "bord") {
    return (
      <div>
        <h2>–ë–æ—Ä—Ç–∏–∫</h2>
        {props.bord.map((b,i) =>
          <button 
            key={i} 
            className={props.selectedBord===i?"bg-blue-200":"bg-gray-100"} 
            onClick={()=>props.setSelectedBord(i)}
          >
            –ë–æ—Ä—Ç–∏–∫ {i}
          </button>
        )}
      </div>
    );
  }

  if(step.type === "washing") {
    return (
      <div>
        <h2>–ú–æ–π–∫–∏</h2>
        {props.washings.map((w,i) => (
          <button 
            key={i} 
            className={props.selectedWashings.includes(i)?"bg-blue-200":"bg-gray-100"}
            onClick={()=>{
              if(props.selectedWashings.includes(i))
                props.setSelectedWashings(props.selectedWashings.filter(x=>x!==i));
              else
                props.setSelectedWashings([...props.selectedWashings,i]);
            }}
          >
            {w[0]}
          </button>
        ))}
      </div>
    );
  }

  if(step.type === "dimensions") {
    return (
      <div>
        <h2>–†–∞–∑–º–µ—Ä—ã (–º–º)</h2>
        <label>W1: <input type="number" value={props.dimensions.W1} onChange={e=>props.setDimensions({...props.dimensions,W1:+e.target.value})} /></label>
        <label>H1: <input type="number" value={props.dimensions.H1} onChange={e=>props.setDimensions({...props.dimensions,H1:+e.target.value})} /></label>
      </div>
    );
  }

  return null;
}